(function(n,o){typeof exports=="object"&&typeof module<"u"?module.exports=o():typeof define=="function"&&define.amd?define(o):(n=typeof globalThis<"u"?globalThis:n||self,n.Formoose=o())})(this,function(){"use strict";var f=Object.defineProperty;var h=(n,o,t)=>o in n?f(n,o,{enumerable:!0,configurable:!0,writable:!0,value:t}):n[o]=t;var c=(n,o,t)=>h(n,typeof o!="symbol"?o+"":o,t);class n{constructor(t){c(this,"handleInputEvents",t=>{const e=t.target,{isValid:s,errors:r}=this.validateInput(e);s?this.removeErrors(e):(this.displayErrors(e,r[0]),this.disableSubmitButton(e.closest("form")))});c(this,"formHasErrors",t=>t.querySelectorAll(".formoose-invalid").length);this.forms=t||document.querySelectorAll("[data-formoose-form]"),this.rules={required:{test:(e,s)=>{if(s.type==="radio"||s.type==="checkbox"){const r=s.closest("form"),a=s.name;return r.querySelectorAll(`input[name="${a}"]:checked`).length>0}return e.trim()!==""},message:"This field is required"},email:{test:e=>/^[^\s@]+@[^\s@]+\.[^\s@]+$/.test(e),message:"Please enter a valid email address"},min:{test:(e,s)=>e.length>=parseInt(s.getAttribute("data-formoose-min")),message:e=>`Please enter at least ${e.getAttribute("data-formoose-min")} characters`},max:{test:(e,s)=>e.length<=parseInt(s.getAttribute("data-formoose-max")),message:e=>`Please enter less than or equal to ${e.getAttribute("data-formoose-max")} characters`},number:{test:e=>!isNaN(e),message:"Please enter a number"},strongPassword:{test:e=>/^(?=.*[a-z])(?=.*[A-Z])(?=.*\d)(?=.*[^a-zA-Z\d])/.test(e),message:"Password must contain at least one lowercase letter, one uppercase letter, one number, and one special character"},same:{test:(e,s)=>{const r=s.getAttribute("data-formoose-same"),a=document.querySelector(`[name="${r}"]`).value;return e===a},message:e=>`Please enter the same value as ${e.getAttribute("data-formoose-same")}`},date:{test:e=>!isNaN(Date.parse(e)),message:"Please enter a valid date"},alpha:{test:e=>/^[a-zA-Z]+$/.test(e),message:"Please enter only letters"},alphaNumeric:{test:e=>/^[a-zA-Z0-9]+$/.test(e),message:"Please enter only letters and numbers"},alphaDash:{test:e=>/^[a-zA-Z_-]+$/.test(e),message:"Please enter only letters, underscores, and dashes"},accepted:{test:e=>e==="on"||e==="yes"||e==="1",message:"The field must be accepted"},array:{test:(e,s)=>{const r=s.hasAttribute("data-formoose-array"),a=s.name;if(!r||!a)return!1;const i=document.querySelectorAll(`input[name="${a}"]`),u=Array.from(i).map(m=>m.value);return Array.isArray(u)&&a.endsWith("[]")},message:"Please enter a valid array"},dateBefore:{test:(e,s)=>{const r=s.getAttribute("data-formoose-dateBefore");return Date.parse(e)<Date.parse(r)},message:e=>`Please enter a date before ${e.getAttribute("data-formoose-dateBefore")}`},dateAfter:{test:(e,s)=>{const r=s.getAttribute("data-formoose-dateAfter");return Date.parse(e)>Date.parse(r)},message:e=>`Please enter a date after ${e.getAttribute("data-formoose-dateAfter")}`},between:{test:(e,s)=>{const r=s.getAttribute("data-formoose-between").split(","),a=parseInt(r[0]),i=parseInt(r[1]);return e>=a&&e<=i},message:e=>{let r=e.getAttribute("data-formoose-between").split(","),a=parseInt(r[0]),i=parseInt(r[1]);return`Please enter a value between ${a} and ${i}`}},boolean:{test:e=>e=="true"||e=="1"||e=="false"||e=="0",message:"Please enter a valid boolean"},different:{test:(e,s)=>{const r=document.querySelector(`[name="${s.getAttribute("data-formoose-different")}"]`).value;return e!==r},message:e=>`Please enter a different value than ${e.getAttribute("data-formoose-different")}`}},this.init()}init(){this.forms.forEach(t=>{t.addEventListener("submit",s=>{s.preventDefault(),this.validateForm(t)?(document.dispatchEvent(new Event("formoose:submitting",{detail:t})),this.disableSubmitButton(t),t.submit(),document.dispatchEvent(new Event("formoose:submitted",{detail:t}))):this.disableSubmitButton(t)}),t.querySelectorAll("input, textarea, select, radio, checkbox").forEach(s=>{s.addEventListener("input",this.handleInputEvents)})})}disableSubmitButton(t){t.querySelector('button[type="submit"]').setAttribute("disabled","disabled")}enableSubmitButton(t){t.querySelector('button[type="submit"]').removeAttribute("disabled")}validateForm(t){const e=t.querySelectorAll("input, textarea, select, radio, checkbox"),s=new Set;return Array.from(e).map(a=>{if((a.type==="radio"||a.type==="checkbox")&&s.has(a.name))return{input:a,isValid:!0};(a.type==="radio"||a.type==="checkbox")&&s.add(a.name);const{isValid:i,errors:u}=this.validateInput(a);return i?this.removeErrors(a):this.displayErrors(a,u[0]),{input:a,isValid:i}}).every(a=>a.isValid)}validateInput(t){const e=t.closest("form"),s=t.name,r=t.type==="radio"||t.type==="checkbox",a=r&&(e.querySelector('input[type="radio"]')||e.querySelector('input[type="checkbox"]'))?e.querySelectorAll(`input[name="${s}"]`):[t],i=r?null:t.value.trim(),u=Object.keys(this.rules).filter(l=>t.hasAttribute(`data-formoose-${l}`)&&(r?null:!this.rules[l].test(i,t))).map(l=>this.getMessage(t,l)),m=u.length===0;if(r){const l=Object.keys(this.rules).filter(d=>a[0].hasAttribute(`data-formoose-${d}`)&&!this.rules[d].test(null,a[0])).map(d=>this.getMessage(a[0],d));return{isValid:l.length===0,errors:l}}return{isValid:m,errors:u}}getMessage(t,e){const s=t.getAttribute(`data-formoose-${e}-message`);return typeof this.rules[e].message=="function"?s||this.rules[e].message(t):s||this.rules[e].message||"Invalid value"}displayErrors(t,e){this.removeErrors(t),t.classList.add("formoose-invalid");const s=this.createErrorContainer(),r=this.createErrorElement();r.textContent=e,s.appendChild(r),t.type==="radio"||t.type==="checkbox"?t.closest("fieldset").appendChild(s):(s.appendChild(r),t.insertAdjacentElement("afterend",s))}createErrorContainer(){const t=document.createElement("div");return t.classList.add("formoose-invalid-feedback"),t}createErrorElement(){const t=document.createElement("p");return t.classList.add("formoose-error-message"),t}removeErrors(t){var s;const e=t.closest("form");if(t.type==="radio"||t.type==="checkbox"){const r=t.closest("fieldset").querySelector(".formoose-invalid-feedback");r&&(t.classList.remove("formoose-invalid"),r.remove())}else t.classList.remove("formoose-invalid"),(s=t.nextSibling)==null||s.remove();this.formHasErrors(e)?this.disableSubmitButton(e):this.enableSubmitButton(e)}addRule(t,e,s){if(typeof e!="function")throw new Error("The rule must be a function");if(typeof s!="string"&&typeof s!="function")throw new Error("The message must be a string or a function");this.rules[t]={test:e,message:s||"Invalid value"}}}return n});
